import assert from 'assert';
import { fileURLToPath } from 'url';
import * as path from 'path';
import * as fs from 'fs';
import { rimrafSync } from 'rimraf';
import { nodefs } from '../esm/index.js';

const generatedFileContents = 'Generated by @static-pages/nodefs test runner.\nThis file can be safely deleted.';
const outputDir = path.join(path.dirname(fileURLToPath(import.meta.url)), 'output');

const readback = (filename) => fs.readFileSync(path.join(outputDir, filename), 'utf8');

describe('write() Tests', () => {
	afterEach(() => {
        // Remove files possibly created during the tests
        rimrafSync(outputDir);
    });

    it('can write one file to the filesystem', async () => {
        const backend = nodefs({
            cwd: outputDir
        });

        await backend.write('newfile1.txt', generatedFileContents);

		const expected = generatedFileContents;
        const output = readback('newfile1.txt');

        assert.strictEqual(output, expected);
    });

    it('can write multiple times', async () => {
        const backend = nodefs({
            cwd: outputDir
        });

        await backend.write('newfile1.txt', generatedFileContents);
        await backend.write('./newfile2.txt', generatedFileContents);

		const expected = [
			generatedFileContents,
			generatedFileContents
		];
        const output = [
            readback('newfile1.txt'),
            readback('./newfile2.txt')
        ];

        assert.deepStrictEqual(output, expected);
    });

    it('can write to subdirectories', async () => {
        const backend = nodefs({
            cwd: outputDir
        });

        await backend.write('./newfolder/newfile3.txt', generatedFileContents);

		const expected = generatedFileContents;
        const output = readback('./newfolder/newfile3.txt');

        assert.strictEqual(output, expected);
    });
});
